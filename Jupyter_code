{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMJ6XykxzaiHDFsVcCNEkte",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pravee81/Spammer_detection-on-Twitter/blob/master/Jupyter_code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "YJ4SfCLyVERN",
        "outputId": "88b332be-e963-401f-e1e7-c340cd384bf7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/pandas/core/nanops.py:1010: RuntimeWarning: invalid value encountered in subtract\n",
            "  sqr = _ensure_numeric((avg - values) ** 2)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   UserID         CreatedAt       CollectedAt  NumberOfFollowings  \\\n",
              "0    6301  18-09-2006 01:07  17-01-2010 20:38                3269   \n",
              "1   10836  27-10-2006 14:38  18-06-2010 03:35                1949   \n",
              "2   10997  29-10-2006 09:50  24-04-2010 01:12                1119   \n",
              "3  633293  14-01-2007 12:40  24-01-2010 11:59                2174   \n",
              "4  717883  27-01-2007 22:14  06-02-2010 06:25                7731   \n",
              "\n",
              "   NumberOfFollowers  NumberOfTweets  LengthOfScreenName  \\\n",
              "0               3071             861                   8   \n",
              "1                793             226                   9   \n",
              "2               9644           38674                  12   \n",
              "3               6029           12718                  11   \n",
              "4               7029             873                   6   \n",
              "\n",
              "   LengthOfDescriptionInUserProfile  AccountAge  FollowersToFollowingsRatio  \\\n",
              "0                               132        1217                    0.939431   \n",
              "1                               134        1329                    0.406875   \n",
              "2                               158        1272                    8.618409   \n",
              "3                               121        1105                    2.773229   \n",
              "4                                70        1105                    0.909197   \n",
              "\n",
              "   AvgTweetsperDay                                   FollowingsSeries  \\\n",
              "0         0.707477  [3269, 3310, 3339, 3381, 3351, 3323, 3305, 327...   \n",
              "1         0.170053  [1949, 1963, 1963, 1963, 1963, 1963, 1963, 196...   \n",
              "2        30.404088  [1119, 1119, 999, 999, 1050, 1170, 1071, 799, ...   \n",
              "3        11.509502  [2174, 2651, 2676, 2674, 2673, 2673, 2673, 267...   \n",
              "4         0.790045  [7731, 7737, 7737, 7741, 7741, 7741, 7740, 774...   \n",
              "\n",
              "    NumWords  NumMentions  NumHashtags  NumLinks  spammer  \n",
              "0  15.420000     0.335000     0.090000  0.705000        1  \n",
              "1  13.343434     0.272727     0.510101  0.656566        1  \n",
              "2  16.944162     0.553299     0.664975  0.269036        1  \n",
              "3  13.450000     0.445000     0.095000  0.320000        1  \n",
              "4  18.470000     0.105000     0.010000  0.690000        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ffcb3cb-86d4-4772-9d1e-ad3f36a61e7e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UserID</th>\n",
              "      <th>CreatedAt</th>\n",
              "      <th>CollectedAt</th>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <th>LengthOfScreenName</th>\n",
              "      <th>LengthOfDescriptionInUserProfile</th>\n",
              "      <th>AccountAge</th>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <th>FollowingsSeries</th>\n",
              "      <th>NumWords</th>\n",
              "      <th>NumMentions</th>\n",
              "      <th>NumHashtags</th>\n",
              "      <th>NumLinks</th>\n",
              "      <th>spammer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6301</td>\n",
              "      <td>18-09-2006 01:07</td>\n",
              "      <td>17-01-2010 20:38</td>\n",
              "      <td>3269</td>\n",
              "      <td>3071</td>\n",
              "      <td>861</td>\n",
              "      <td>8</td>\n",
              "      <td>132</td>\n",
              "      <td>1217</td>\n",
              "      <td>0.939431</td>\n",
              "      <td>0.707477</td>\n",
              "      <td>[3269, 3310, 3339, 3381, 3351, 3323, 3305, 327...</td>\n",
              "      <td>15.420000</td>\n",
              "      <td>0.335000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.705000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10836</td>\n",
              "      <td>27-10-2006 14:38</td>\n",
              "      <td>18-06-2010 03:35</td>\n",
              "      <td>1949</td>\n",
              "      <td>793</td>\n",
              "      <td>226</td>\n",
              "      <td>9</td>\n",
              "      <td>134</td>\n",
              "      <td>1329</td>\n",
              "      <td>0.406875</td>\n",
              "      <td>0.170053</td>\n",
              "      <td>[1949, 1963, 1963, 1963, 1963, 1963, 1963, 196...</td>\n",
              "      <td>13.343434</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.510101</td>\n",
              "      <td>0.656566</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10997</td>\n",
              "      <td>29-10-2006 09:50</td>\n",
              "      <td>24-04-2010 01:12</td>\n",
              "      <td>1119</td>\n",
              "      <td>9644</td>\n",
              "      <td>38674</td>\n",
              "      <td>12</td>\n",
              "      <td>158</td>\n",
              "      <td>1272</td>\n",
              "      <td>8.618409</td>\n",
              "      <td>30.404088</td>\n",
              "      <td>[1119, 1119, 999, 999, 1050, 1170, 1071, 799, ...</td>\n",
              "      <td>16.944162</td>\n",
              "      <td>0.553299</td>\n",
              "      <td>0.664975</td>\n",
              "      <td>0.269036</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>633293</td>\n",
              "      <td>14-01-2007 12:40</td>\n",
              "      <td>24-01-2010 11:59</td>\n",
              "      <td>2174</td>\n",
              "      <td>6029</td>\n",
              "      <td>12718</td>\n",
              "      <td>11</td>\n",
              "      <td>121</td>\n",
              "      <td>1105</td>\n",
              "      <td>2.773229</td>\n",
              "      <td>11.509502</td>\n",
              "      <td>[2174, 2651, 2676, 2674, 2673, 2673, 2673, 267...</td>\n",
              "      <td>13.450000</td>\n",
              "      <td>0.445000</td>\n",
              "      <td>0.095000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>717883</td>\n",
              "      <td>27-01-2007 22:14</td>\n",
              "      <td>06-02-2010 06:25</td>\n",
              "      <td>7731</td>\n",
              "      <td>7029</td>\n",
              "      <td>873</td>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>1105</td>\n",
              "      <td>0.909197</td>\n",
              "      <td>0.790045</td>\n",
              "      <td>[7731, 7737, 7737, 7741, 7741, 7741, 7740, 774...</td>\n",
              "      <td>18.470000</td>\n",
              "      <td>0.105000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.690000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ffcb3cb-86d4-4772-9d1e-ad3f36a61e7e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ffcb3cb-86d4-4772-9d1e-ad3f36a61e7e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ffcb3cb-86d4-4772-9d1e-ad3f36a61e7e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5fd43fb8-5bdc-4cad-9af2-98c38ee65c75\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5fd43fb8-5bdc-4cad-9af2-98c38ee65c75')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5fd43fb8-5bdc-4cad-9af2-98c38ee65c75 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('Spammer_dect.csv')\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sFbWbXyfV6Mk",
        "outputId": "8e93023f-c2d2-467c-d938-622071981ef5"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 39811 entries, 0 to 39810\n",
            "Data columns (total 17 columns):\n",
            " #   Column                            Non-Null Count  Dtype  \n",
            "---  ------                            --------------  -----  \n",
            " 0   UserID                            39811 non-null  int64  \n",
            " 1   CreatedAt                         39811 non-null  object \n",
            " 2   CollectedAt                       39811 non-null  object \n",
            " 3   NumberOfFollowings                39811 non-null  int64  \n",
            " 4   NumberOfFollowers                 39811 non-null  int64  \n",
            " 5   NumberOfTweets                    39811 non-null  int64  \n",
            " 6   LengthOfScreenName                39811 non-null  int64  \n",
            " 7   LengthOfDescriptionInUserProfile  39811 non-null  int64  \n",
            " 8   AccountAge                        39811 non-null  int64  \n",
            " 9   FollowersToFollowingsRatio        39811 non-null  float64\n",
            " 10  AvgTweetsperDay                   39811 non-null  float64\n",
            " 11  FollowingsSeries                  39811 non-null  object \n",
            " 12  NumWords                          39811 non-null  float64\n",
            " 13  NumMentions                       39811 non-null  float64\n",
            " 14  NumHashtags                       39811 non-null  float64\n",
            " 15  NumLinks                          39811 non-null  float64\n",
            " 16  spammer                           39811 non-null  int64  \n",
            "dtypes: float64(6), int64(8), object(3)\n",
            "memory usage: 5.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "7foik74DWVWT",
        "outputId": "95ad0fde-5cd2-4f8b-c770-6893f0f874d5"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UserID                              0\n",
              "CreatedAt                           0\n",
              "CollectedAt                         0\n",
              "NumberOfFollowings                  0\n",
              "NumberOfFollowers                   0\n",
              "NumberOfTweets                      0\n",
              "LengthOfScreenName                  0\n",
              "LengthOfDescriptionInUserProfile    0\n",
              "AccountAge                          0\n",
              "FollowersToFollowingsRatio          0\n",
              "AvgTweetsperDay                     0\n",
              "FollowingsSeries                    0\n",
              "NumWords                            0\n",
              "NumMentions                         0\n",
              "NumHashtags                         0\n",
              "NumLinks                            0\n",
              "spammer                             0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>UserID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CreatedAt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CollectedAt</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LengthOfScreenName</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LengthOfDescriptionInUserProfile</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AccountAge</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FollowingsSeries</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumWords</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumMentions</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumHashtags</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NumLinks</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>spammer</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=df.dropna()\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 827
        },
        "id": "7PvqMqMlWc_N",
        "outputId": "49de3b8e-fd93-41ff-ca4b-311e2a1b8c69"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/pandas/core/nanops.py:1010: RuntimeWarning: invalid value encountered in subtract\n",
            "  sqr = _ensure_numeric((avg - values) ** 2)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         UserID         CreatedAt       CollectedAt  NumberOfFollowings  \\\n",
              "0          6301  18-09-2006 01:07  17-01-2010 20:38                3269   \n",
              "1         10836  27-10-2006 14:38  18-06-2010 03:35                1949   \n",
              "2         10997  29-10-2006 09:50  24-04-2010 01:12                1119   \n",
              "3        633293  14-01-2007 12:40  24-01-2010 11:59                2174   \n",
              "4        717883  27-01-2007 22:14  06-02-2010 06:25                7731   \n",
              "...         ...               ...               ...                 ...   \n",
              "39806  93390803  29-11-2009 06:33  29-11-2009 07:26                 172   \n",
              "39807  93390990  29-11-2009 06:34  29-11-2009 07:50                   5   \n",
              "39808  93402679  29-11-2009 07:47  29-11-2009 07:56                  20   \n",
              "39809  93426370  29-11-2009 10:04  29-11-2009 10:13                  20   \n",
              "39810  93442002  29-11-2009 11:27  29-11-2009 11:36                   1   \n",
              "\n",
              "       NumberOfFollowers  NumberOfTweets  LengthOfScreenName  \\\n",
              "0                   3071             861                   8   \n",
              "1                    793             226                   9   \n",
              "2                   9644           38674                  12   \n",
              "3                   6029           12718                  11   \n",
              "4                   7029             873                   6   \n",
              "...                  ...             ...                 ...   \n",
              "39806                  3               2                  13   \n",
              "39807                  0               5                  11   \n",
              "39808                  1               1                  12   \n",
              "39809                  1               1                  10   \n",
              "39810                  0               1                   7   \n",
              "\n",
              "       LengthOfDescriptionInUserProfile  AccountAge  \\\n",
              "0                                   132        1217   \n",
              "1                                   134        1329   \n",
              "2                                   158        1272   \n",
              "3                                   121        1105   \n",
              "4                                    70        1105   \n",
              "...                                 ...         ...   \n",
              "39806                                 0           0   \n",
              "39807                                 0           0   \n",
              "39808                                 0           0   \n",
              "39809                                 0           0   \n",
              "39810                                 0           0   \n",
              "\n",
              "       FollowersToFollowingsRatio  AvgTweetsperDay  \\\n",
              "0                        0.939431         0.707477   \n",
              "1                        0.406875         0.170053   \n",
              "2                        8.618409        30.404088   \n",
              "3                        2.773229        11.509502   \n",
              "4                        0.909197         0.790045   \n",
              "...                           ...              ...   \n",
              "39806                    0.017442              inf   \n",
              "39807                    0.000000              inf   \n",
              "39808                    0.050000              inf   \n",
              "39809                    0.050000              inf   \n",
              "39810                    0.000000              inf   \n",
              "\n",
              "                                        FollowingsSeries   NumWords  \\\n",
              "0      [3269, 3310, 3339, 3381, 3351, 3323, 3305, 327...  15.420000   \n",
              "1      [1949, 1963, 1963, 1963, 1963, 1963, 1963, 196...  13.343434   \n",
              "2      [1119, 1119, 999, 999, 1050, 1170, 1071, 799, ...  16.944162   \n",
              "3      [2174, 2651, 2676, 2674, 2673, 2673, 2673, 267...  13.450000   \n",
              "4      [7731, 7737, 7737, 7741, 7741, 7741, 7740, 774...  18.470000   \n",
              "...                                                  ...        ...   \n",
              "39806  [673, 673, 673, 673, 673, 673, 675, 675, 680, ...   7.000000   \n",
              "39807  [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...   8.200000   \n",
              "39808  [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2...   2.000000   \n",
              "39809  [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2...  18.000000   \n",
              "39810  [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1...   7.000000   \n",
              "\n",
              "       NumMentions  NumHashtags  NumLinks  spammer  \n",
              "0         0.335000     0.090000  0.705000        1  \n",
              "1         0.272727     0.510101  0.656566        1  \n",
              "2         0.553299     0.664975  0.269036        1  \n",
              "3         0.445000     0.095000  0.320000        1  \n",
              "4         0.105000     0.010000  0.690000        1  \n",
              "...            ...          ...       ...      ...  \n",
              "39806     1.000000     0.000000  0.000000        0  \n",
              "39807     0.000000     0.800000  0.800000        0  \n",
              "39808     0.000000     0.000000  0.000000        0  \n",
              "39809     0.000000     0.000000  0.000000        0  \n",
              "39810     0.000000     0.000000  0.000000        0  \n",
              "\n",
              "[39811 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8666a89-9a69-4c62-b74d-3d2d110e4af3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UserID</th>\n",
              "      <th>CreatedAt</th>\n",
              "      <th>CollectedAt</th>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <th>LengthOfScreenName</th>\n",
              "      <th>LengthOfDescriptionInUserProfile</th>\n",
              "      <th>AccountAge</th>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <th>FollowingsSeries</th>\n",
              "      <th>NumWords</th>\n",
              "      <th>NumMentions</th>\n",
              "      <th>NumHashtags</th>\n",
              "      <th>NumLinks</th>\n",
              "      <th>spammer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6301</td>\n",
              "      <td>18-09-2006 01:07</td>\n",
              "      <td>17-01-2010 20:38</td>\n",
              "      <td>3269</td>\n",
              "      <td>3071</td>\n",
              "      <td>861</td>\n",
              "      <td>8</td>\n",
              "      <td>132</td>\n",
              "      <td>1217</td>\n",
              "      <td>0.939431</td>\n",
              "      <td>0.707477</td>\n",
              "      <td>[3269, 3310, 3339, 3381, 3351, 3323, 3305, 327...</td>\n",
              "      <td>15.420000</td>\n",
              "      <td>0.335000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.705000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10836</td>\n",
              "      <td>27-10-2006 14:38</td>\n",
              "      <td>18-06-2010 03:35</td>\n",
              "      <td>1949</td>\n",
              "      <td>793</td>\n",
              "      <td>226</td>\n",
              "      <td>9</td>\n",
              "      <td>134</td>\n",
              "      <td>1329</td>\n",
              "      <td>0.406875</td>\n",
              "      <td>0.170053</td>\n",
              "      <td>[1949, 1963, 1963, 1963, 1963, 1963, 1963, 196...</td>\n",
              "      <td>13.343434</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.510101</td>\n",
              "      <td>0.656566</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10997</td>\n",
              "      <td>29-10-2006 09:50</td>\n",
              "      <td>24-04-2010 01:12</td>\n",
              "      <td>1119</td>\n",
              "      <td>9644</td>\n",
              "      <td>38674</td>\n",
              "      <td>12</td>\n",
              "      <td>158</td>\n",
              "      <td>1272</td>\n",
              "      <td>8.618409</td>\n",
              "      <td>30.404088</td>\n",
              "      <td>[1119, 1119, 999, 999, 1050, 1170, 1071, 799, ...</td>\n",
              "      <td>16.944162</td>\n",
              "      <td>0.553299</td>\n",
              "      <td>0.664975</td>\n",
              "      <td>0.269036</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>633293</td>\n",
              "      <td>14-01-2007 12:40</td>\n",
              "      <td>24-01-2010 11:59</td>\n",
              "      <td>2174</td>\n",
              "      <td>6029</td>\n",
              "      <td>12718</td>\n",
              "      <td>11</td>\n",
              "      <td>121</td>\n",
              "      <td>1105</td>\n",
              "      <td>2.773229</td>\n",
              "      <td>11.509502</td>\n",
              "      <td>[2174, 2651, 2676, 2674, 2673, 2673, 2673, 267...</td>\n",
              "      <td>13.450000</td>\n",
              "      <td>0.445000</td>\n",
              "      <td>0.095000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>717883</td>\n",
              "      <td>27-01-2007 22:14</td>\n",
              "      <td>06-02-2010 06:25</td>\n",
              "      <td>7731</td>\n",
              "      <td>7029</td>\n",
              "      <td>873</td>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>1105</td>\n",
              "      <td>0.909197</td>\n",
              "      <td>0.790045</td>\n",
              "      <td>[7731, 7737, 7737, 7741, 7741, 7741, 7740, 774...</td>\n",
              "      <td>18.470000</td>\n",
              "      <td>0.105000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.690000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39806</th>\n",
              "      <td>93390803</td>\n",
              "      <td>29-11-2009 06:33</td>\n",
              "      <td>29-11-2009 07:26</td>\n",
              "      <td>172</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.017442</td>\n",
              "      <td>inf</td>\n",
              "      <td>[673, 673, 673, 673, 673, 673, 675, 675, 680, ...</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39807</th>\n",
              "      <td>93390990</td>\n",
              "      <td>29-11-2009 06:34</td>\n",
              "      <td>29-11-2009 07:50</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>inf</td>\n",
              "      <td>[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...</td>\n",
              "      <td>8.200000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39808</th>\n",
              "      <td>93402679</td>\n",
              "      <td>29-11-2009 07:47</td>\n",
              "      <td>29-11-2009 07:56</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>inf</td>\n",
              "      <td>[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2...</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39809</th>\n",
              "      <td>93426370</td>\n",
              "      <td>29-11-2009 10:04</td>\n",
              "      <td>29-11-2009 10:13</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>inf</td>\n",
              "      <td>[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2...</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39810</th>\n",
              "      <td>93442002</td>\n",
              "      <td>29-11-2009 11:27</td>\n",
              "      <td>29-11-2009 11:36</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>inf</td>\n",
              "      <td>[14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1...</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39811 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8666a89-9a69-4c62-b74d-3d2d110e4af3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d8666a89-9a69-4c62-b74d-3d2d110e4af3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d8666a89-9a69-4c62-b74d-3d2d110e4af3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-20f71968-9c22-4fc2-b8c0-a15fc6ac2b02\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20f71968-9c22-4fc2-b8c0-a15fc6ac2b02')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-20f71968-9c22-4fc2-b8c0-a15fc6ac2b02 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ec55e024-6a9a-4eb0-8158-a0675465ce87\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ec55e024-6a9a-4eb0-8158-a0675465ce87 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Step 1: Select numeric columns from the dataset\n",
        "numeric_data = data.select_dtypes(include=[np.number])\n",
        "\n",
        "# Step 2: Replace infinite values with NaN\n",
        "numeric_data.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "\n",
        "# Step 3: Drop rows containing NaN values\n",
        "numeric_data.dropna(inplace=True)\n",
        "\n",
        "# Check if the data has been cleaned\n",
        "numeric_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "o_T-zpfVYUOm",
        "outputId": "3ca2b021-69f7-4a4d-8c61-68b6bd6bfd5f"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   UserID  NumberOfFollowings  NumberOfFollowers  NumberOfTweets  \\\n",
              "0    6301                3269               3071             861   \n",
              "1   10836                1949                793             226   \n",
              "2   10997                1119               9644           38674   \n",
              "3  633293                2174               6029           12718   \n",
              "4  717883                7731               7029             873   \n",
              "\n",
              "   LengthOfScreenName  LengthOfDescriptionInUserProfile  AccountAge  \\\n",
              "0                   8                               132        1217   \n",
              "1                   9                               134        1329   \n",
              "2                  12                               158        1272   \n",
              "3                  11                               121        1105   \n",
              "4                   6                                70        1105   \n",
              "\n",
              "   FollowersToFollowingsRatio  AvgTweetsperDay   NumWords  NumMentions  \\\n",
              "0                    0.939431         0.707477  15.420000     0.335000   \n",
              "1                    0.406875         0.170053  13.343434     0.272727   \n",
              "2                    8.618409        30.404088  16.944162     0.553299   \n",
              "3                    2.773229        11.509502  13.450000     0.445000   \n",
              "4                    0.909197         0.790045  18.470000     0.105000   \n",
              "\n",
              "   NumHashtags  NumLinks  spammer  \n",
              "0     0.090000  0.705000        1  \n",
              "1     0.510101  0.656566        1  \n",
              "2     0.664975  0.269036        1  \n",
              "3     0.095000  0.320000        1  \n",
              "4     0.010000  0.690000        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66175b13-95ce-4c47-a16a-b839264da679\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UserID</th>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <th>LengthOfScreenName</th>\n",
              "      <th>LengthOfDescriptionInUserProfile</th>\n",
              "      <th>AccountAge</th>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <th>NumWords</th>\n",
              "      <th>NumMentions</th>\n",
              "      <th>NumHashtags</th>\n",
              "      <th>NumLinks</th>\n",
              "      <th>spammer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6301</td>\n",
              "      <td>3269</td>\n",
              "      <td>3071</td>\n",
              "      <td>861</td>\n",
              "      <td>8</td>\n",
              "      <td>132</td>\n",
              "      <td>1217</td>\n",
              "      <td>0.939431</td>\n",
              "      <td>0.707477</td>\n",
              "      <td>15.420000</td>\n",
              "      <td>0.335000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.705000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10836</td>\n",
              "      <td>1949</td>\n",
              "      <td>793</td>\n",
              "      <td>226</td>\n",
              "      <td>9</td>\n",
              "      <td>134</td>\n",
              "      <td>1329</td>\n",
              "      <td>0.406875</td>\n",
              "      <td>0.170053</td>\n",
              "      <td>13.343434</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.510101</td>\n",
              "      <td>0.656566</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10997</td>\n",
              "      <td>1119</td>\n",
              "      <td>9644</td>\n",
              "      <td>38674</td>\n",
              "      <td>12</td>\n",
              "      <td>158</td>\n",
              "      <td>1272</td>\n",
              "      <td>8.618409</td>\n",
              "      <td>30.404088</td>\n",
              "      <td>16.944162</td>\n",
              "      <td>0.553299</td>\n",
              "      <td>0.664975</td>\n",
              "      <td>0.269036</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>633293</td>\n",
              "      <td>2174</td>\n",
              "      <td>6029</td>\n",
              "      <td>12718</td>\n",
              "      <td>11</td>\n",
              "      <td>121</td>\n",
              "      <td>1105</td>\n",
              "      <td>2.773229</td>\n",
              "      <td>11.509502</td>\n",
              "      <td>13.450000</td>\n",
              "      <td>0.445000</td>\n",
              "      <td>0.095000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>717883</td>\n",
              "      <td>7731</td>\n",
              "      <td>7029</td>\n",
              "      <td>873</td>\n",
              "      <td>6</td>\n",
              "      <td>70</td>\n",
              "      <td>1105</td>\n",
              "      <td>0.909197</td>\n",
              "      <td>0.790045</td>\n",
              "      <td>18.470000</td>\n",
              "      <td>0.105000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.690000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66175b13-95ce-4c47-a16a-b839264da679')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66175b13-95ce-4c47-a16a-b839264da679 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66175b13-95ce-4c47-a16a-b839264da679');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cb3b9ee1-a1e8-4752-a224-608ea1661adf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb3b9ee1-a1e8-4752-a224-608ea1661adf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cb3b9ee1-a1e8-4752-a224-608ea1661adf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "numeric_data",
              "summary": "{\n  \"name\": \"numeric_data\",\n  \"rows\": 38376,\n  \"fields\": [\n    {\n      \"column\": \"UserID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41009845,\n        \"min\": 614,\n        \"max\": 173203020,\n        \"num_unique_values\": 38334,\n        \"samples\": [\n          18284172,\n          37286356,\n          22825485\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4354,\n        \"min\": 1,\n        \"max\": 109388,\n        \"num_unique_values\": 5427,\n        \"samples\": [\n          7704,\n          3437,\n          46501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26411,\n        \"min\": 0,\n        \"max\": 4309347,\n        \"num_unique_values\": 5555,\n        \"samples\": [\n          800,\n          5799,\n          794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTweets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5356,\n        \"min\": 1,\n        \"max\": 350453,\n        \"num_unique_values\": 7341,\n        \"samples\": [\n          3529,\n          6618,\n          3377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LengthOfScreenName\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 15,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          7,\n          15,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LengthOfDescriptionInUserProfile\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 0,\n        \"max\": 474,\n        \"num_unique_values\": 176,\n        \"samples\": [\n          115,\n          104,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AccountAge\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 189,\n        \"min\": 1,\n        \"max\": 1329,\n        \"num_unique_values\": 1070,\n        \"samples\": [\n          258,\n          274,\n          909\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FollowersToFollowingsRatio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 216.43463240169717,\n        \"min\": 0.0,\n        \"max\": 33344.0,\n        \"num_unique_values\": 27295,\n        \"samples\": [\n          42.6875,\n          0.909430707,\n          0.777070064\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgTweetsperDay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.0827798237272,\n        \"min\": 0.001697793,\n        \"max\": 1366.733333,\n        \"num_unique_values\": 29067,\n        \"samples\": [\n          21.30973451,\n          1.571138211,\n          67.61403509\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumWords\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.70840045707413,\n        \"min\": 0.74,\n        \"max\": 9673.0,\n        \"num_unique_values\": 17801,\n        \"samples\": [\n          18.69849246,\n          1.51,\n          5.565\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumMentions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.756027254498229,\n        \"min\": 0.0,\n        \"max\": 88.6,\n        \"num_unique_values\": 6073,\n        \"samples\": [\n          0.677018634,\n          0.146788991,\n          1.292929293\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHashtags\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.866458391050498,\n        \"min\": 0.0,\n        \"max\": 547.5,\n        \"num_unique_values\": 3881,\n        \"samples\": [\n          0.233160622,\n          0.016042781,\n          0.278074866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumLinks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2213511735847846,\n        \"min\": 0.0,\n        \"max\": 388.5,\n        \"num_unique_values\": 5606,\n        \"samples\": [\n          0.85492228,\n          1.12,\n          0.879781421\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"spammer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import Normalizer\n",
        "scaler = Normalizer()\n",
        "scaled_data = scaler.fit_transform(numeric_data)\n",
        "\n",
        "# Convert the scaled data back into a DataFrame\n",
        "scaled_df = pd.DataFrame(scaled_data, columns=numeric_data.columns)\n",
        "scaled_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "axginAC6WwKs",
        "outputId": "c8740ab8-1b0d-419f-c935-c1440d441b74"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     UserID  NumberOfFollowings  NumberOfFollowers  NumberOfTweets  \\\n",
              "0  0.799840            0.414962           0.389828        0.109294   \n",
              "1  0.974352            0.175250           0.071305        0.020321   \n",
              "2  0.265740            0.027040           0.233045        0.934548   \n",
              "3  0.999746            0.003432           0.009518        0.020077   \n",
              "4  0.999892            0.010768           0.009790        0.001216   \n",
              "\n",
              "   LengthOfScreenName  LengthOfDescriptionInUserProfile  AccountAge  \\\n",
              "0            0.001016                          0.016756    0.154484   \n",
              "1            0.000809                          0.012049    0.119501   \n",
              "2            0.000290                          0.003818    0.030738   \n",
              "3            0.000017                          0.000191    0.001744   \n",
              "4            0.000008                          0.000097    0.001539   \n",
              "\n",
              "   FollowersToFollowingsRatio  AvgTweetsperDay  NumWords   NumMentions  \\\n",
              "0                    0.000119         0.000090  0.001957  4.252442e-05   \n",
              "1                    0.000037         0.000015  0.001200  2.452311e-05   \n",
              "2                    0.000208         0.000735  0.000409  1.337036e-05   \n",
              "3                    0.000004         0.000018  0.000021  7.024976e-07   \n",
              "4                    0.000001         0.000001  0.000026  1.462476e-07   \n",
              "\n",
              "    NumHashtags      NumLinks   spammer  \n",
              "0  1.142447e-05  8.949170e-05  0.000127  \n",
              "1  4.586730e-05  5.903711e-05  0.000090  \n",
              "2  1.606896e-05  6.501183e-06  0.000024  \n",
              "3  1.499714e-07  5.051668e-07  0.000002  \n",
              "4  1.392834e-08  9.610558e-07  0.000001  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-45643a8a-883d-4623-8a79-00fc0d6d8d52\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UserID</th>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <th>LengthOfScreenName</th>\n",
              "      <th>LengthOfDescriptionInUserProfile</th>\n",
              "      <th>AccountAge</th>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <th>NumWords</th>\n",
              "      <th>NumMentions</th>\n",
              "      <th>NumHashtags</th>\n",
              "      <th>NumLinks</th>\n",
              "      <th>spammer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.799840</td>\n",
              "      <td>0.414962</td>\n",
              "      <td>0.389828</td>\n",
              "      <td>0.109294</td>\n",
              "      <td>0.001016</td>\n",
              "      <td>0.016756</td>\n",
              "      <td>0.154484</td>\n",
              "      <td>0.000119</td>\n",
              "      <td>0.000090</td>\n",
              "      <td>0.001957</td>\n",
              "      <td>4.252442e-05</td>\n",
              "      <td>1.142447e-05</td>\n",
              "      <td>8.949170e-05</td>\n",
              "      <td>0.000127</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.974352</td>\n",
              "      <td>0.175250</td>\n",
              "      <td>0.071305</td>\n",
              "      <td>0.020321</td>\n",
              "      <td>0.000809</td>\n",
              "      <td>0.012049</td>\n",
              "      <td>0.119501</td>\n",
              "      <td>0.000037</td>\n",
              "      <td>0.000015</td>\n",
              "      <td>0.001200</td>\n",
              "      <td>2.452311e-05</td>\n",
              "      <td>4.586730e-05</td>\n",
              "      <td>5.903711e-05</td>\n",
              "      <td>0.000090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.265740</td>\n",
              "      <td>0.027040</td>\n",
              "      <td>0.233045</td>\n",
              "      <td>0.934548</td>\n",
              "      <td>0.000290</td>\n",
              "      <td>0.003818</td>\n",
              "      <td>0.030738</td>\n",
              "      <td>0.000208</td>\n",
              "      <td>0.000735</td>\n",
              "      <td>0.000409</td>\n",
              "      <td>1.337036e-05</td>\n",
              "      <td>1.606896e-05</td>\n",
              "      <td>6.501183e-06</td>\n",
              "      <td>0.000024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.999746</td>\n",
              "      <td>0.003432</td>\n",
              "      <td>0.009518</td>\n",
              "      <td>0.020077</td>\n",
              "      <td>0.000017</td>\n",
              "      <td>0.000191</td>\n",
              "      <td>0.001744</td>\n",
              "      <td>0.000004</td>\n",
              "      <td>0.000018</td>\n",
              "      <td>0.000021</td>\n",
              "      <td>7.024976e-07</td>\n",
              "      <td>1.499714e-07</td>\n",
              "      <td>5.051668e-07</td>\n",
              "      <td>0.000002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.999892</td>\n",
              "      <td>0.010768</td>\n",
              "      <td>0.009790</td>\n",
              "      <td>0.001216</td>\n",
              "      <td>0.000008</td>\n",
              "      <td>0.000097</td>\n",
              "      <td>0.001539</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>0.000001</td>\n",
              "      <td>0.000026</td>\n",
              "      <td>1.462476e-07</td>\n",
              "      <td>1.392834e-08</td>\n",
              "      <td>9.610558e-07</td>\n",
              "      <td>0.000001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45643a8a-883d-4623-8a79-00fc0d6d8d52')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-45643a8a-883d-4623-8a79-00fc0d6d8d52 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-45643a8a-883d-4623-8a79-00fc0d6d8d52');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d724fd58-2b59-4bac-8fe0-58276efcf0b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d724fd58-2b59-4bac-8fe0-58276efcf0b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d724fd58-2b59-4bac-8fe0-58276efcf0b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "scaled_df",
              "summary": "{\n  \"name\": \"scaled_df\",\n  \"rows\": 38376,\n  \"fields\": [\n    {\n      \"column\": \"UserID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008843079187115592,\n        \"min\": 0.17079096225204748,\n        \"max\": 0.9999999999999984,\n        \"num_unique_values\": 37817,\n        \"samples\": [\n          0.9999999999853931,\n          0.9999999999999027,\n          0.9999999996802658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003546629112261528,\n        \"min\": 5.963781643959575e-09,\n        \"max\": 0.46585378252784143,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          7.876990035743532e-06,\n          2.5825970093159176e-06,\n          1.2070257644342923e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004862034861406944,\n        \"min\": 0.0,\n        \"max\": 0.45938535265881886,\n        \"num_unique_values\": 38101,\n        \"samples\": [\n          3.0758865776563522e-06,\n          1.6371049315338071e-06,\n          1.4822253097928952e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTweets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01215723473411934,\n        \"min\": 5.814850462847191e-09,\n        \"max\": 0.934548467353064,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          0.00029417984897309516,\n          2.9983711408466538e-06,\n          2.9680961420515387e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LengthOfScreenName\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9337222391388732e-05,\n        \"min\": 1.5007353941043036e-08,\n        \"max\": 0.0029684378765954776,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          4.354115095134616e-07,\n          5.5969594629137534e-08,\n          8.904288426154615e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LengthOfDescriptionInUserProfile\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00024028152068112705,\n        \"min\": 0.0,\n        \"max\": 0.03304915325240263,\n        \"num_unique_values\": 27440,\n        \"samples\": [\n          6.499215695553526e-07,\n          2.9388300719658997e-06,\n          3.961069813417985e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AccountAge\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004774037476160068,\n        \"min\": 5.7735713846096686e-09,\n        \"max\": 0.6030876285949812,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          9.93529898980717e-06,\n          6.31656853671695e-07,\n          2.9680961420515383e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FollowersToFollowingsRatio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.547004523374154e-05,\n        \"min\": 0.0,\n        \"max\": 0.006388177181108101,\n        \"num_unique_values\": 38101,\n        \"samples\": [\n          2.1360323453683547e-08,\n          2.5659951893439154e-09,\n          4.940751032642984e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgTweetsperDay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0366734681585578e-05,\n        \"min\": 4.534023856841822e-11,\n        \"max\": 0.0007655577294283886,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          1.1720312706908685e-06,\n          3.795406507370464e-08,\n          9.893653806838461e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumWords\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.4703379619954186e-05,\n        \"min\": 6.060182729296122e-09,\n        \"max\": 0.006913986554236966,\n        \"num_unique_values\": 38376,\n        \"samples\": [\n          7.226359133482407e-07,\n          6.91089535145798e-08,\n          2.0875609532429156e-07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumMentions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3641589598572376e-06,\n        \"min\": 0.0,\n        \"max\": 0.0003215807699645101,\n        \"num_unique_values\": 27395,\n        \"samples\": [\n          5.060246279808905e-09,\n          1.0882946955229281e-08,\n          2.9479377543718694e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHashtags\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.476580760766217e-07,\n        \"min\": 0.0,\n        \"max\": 0.00010884272214183418,\n        \"num_unique_values\": 23264,\n        \"samples\": [\n          8.320493382460776e-09,\n          1.1420513382330288e-10,\n          2.5515898591209124e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumLinks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.563672357497164e-07,\n        \"min\": 0.0,\n        \"max\": 8.949169530144197e-05,\n        \"num_unique_values\": 34480,\n        \"samples\": [\n          1.0755787688932117e-09,\n          5.267951973295082e-08,\n          2.3830088398965497e-09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"spammer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.03965816066504e-07,\n        \"min\": 0.0,\n        \"max\": 0.00012693857489566238,\n        \"num_unique_values\": 19818,\n        \"samples\": [\n          5.871833688721099e-08,\n          2.2605008397292547e-08,\n          2.1398336794456995e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sn\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "1wsXNoCEYyKQ"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data[['AccountAge', 'NumberOfFollowers']])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "RVS1occFZqJT",
        "outputId": "13f96902-9e0e-43a8-c051-f7746ff41448"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "subset_data = data.head(50)\n",
        "plt.figure(figsize=(12,8))\n",
        "sn.barplot(x='AccountAge', y='NumberOfTweets', data=subset_data)\n",
        "plt.xticks(rotation=90)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Fr8yNUCbd-6A",
        "outputId": "af6b9b7d-e74f-4f20-cf11-6aa7b84c4ab1"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([0,\n",
              "  1,\n",
              "  2,\n",
              "  3,\n",
              "  4,\n",
              "  5,\n",
              "  6,\n",
              "  7,\n",
              "  8,\n",
              "  9,\n",
              "  10,\n",
              "  11,\n",
              "  12,\n",
              "  13,\n",
              "  14,\n",
              "  15,\n",
              "  16,\n",
              "  17,\n",
              "  18,\n",
              "  19,\n",
              "  20,\n",
              "  21,\n",
              "  22,\n",
              "  23,\n",
              "  24,\n",
              "  25,\n",
              "  26,\n",
              "  27,\n",
              "  28,\n",
              "  29,\n",
              "  30,\n",
              "  31,\n",
              "  32,\n",
              "  33,\n",
              "  34,\n",
              "  35,\n",
              "  36,\n",
              "  37,\n",
              "  38,\n",
              "  39,\n",
              "  40,\n",
              "  41,\n",
              "  42],\n",
              " [Text(0, 0, '962'),\n",
              "  Text(1, 0, '964'),\n",
              "  Text(2, 0, '967'),\n",
              "  Text(3, 0, '968'),\n",
              "  Text(4, 0, '976'),\n",
              "  Text(5, 0, '981'),\n",
              "  Text(6, 0, '983'),\n",
              "  Text(7, 0, '1003'),\n",
              "  Text(8, 0, '1004'),\n",
              "  Text(9, 0, '1005'),\n",
              "  Text(10, 0, '1007'),\n",
              "  Text(11, 0, '1016'),\n",
              "  Text(12, 0, '1017'),\n",
              "  Text(13, 0, '1018'),\n",
              "  Text(14, 0, '1020'),\n",
              "  Text(15, 0, '1023'),\n",
              "  Text(16, 0, '1025'),\n",
              "  Text(17, 0, '1027'),\n",
              "  Text(18, 0, '1029'),\n",
              "  Text(19, 0, '1034'),\n",
              "  Text(20, 0, '1035'),\n",
              "  Text(21, 0, '1039'),\n",
              "  Text(22, 0, '1042'),\n",
              "  Text(23, 0, '1045'),\n",
              "  Text(24, 0, '1053'),\n",
              "  Text(25, 0, '1060'),\n",
              "  Text(26, 0, '1066'),\n",
              "  Text(27, 0, '1070'),\n",
              "  Text(28, 0, '1073'),\n",
              "  Text(29, 0, '1077'),\n",
              "  Text(30, 0, '1086'),\n",
              "  Text(31, 0, '1088'),\n",
              "  Text(32, 0, '1105'),\n",
              "  Text(33, 0, '1128'),\n",
              "  Text(34, 0, '1137'),\n",
              "  Text(35, 0, '1155'),\n",
              "  Text(36, 0, '1159'),\n",
              "  Text(37, 0, '1170'),\n",
              "  Text(38, 0, '1186'),\n",
              "  Text(39, 0, '1217'),\n",
              "  Text(40, 0, '1261'),\n",
              "  Text(41, 0, '1272'),\n",
              "  Text(42, 0, '1329')])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5jYKK6PvwFw1",
        "outputId": "8c2d91ae-d35b-49fe-efec-d73d2eba5a7b"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['UserID', 'CreatedAt', 'CollectedAt', 'NumberOfFollowings',\n",
            "       'NumberOfFollowers', 'NumberOfTweets', 'LengthOfScreenName',\n",
            "       'LengthOfDescriptionInUserProfile', 'AccountAge',\n",
            "       'FollowersToFollowingsRatio', 'AvgTweetsperDay', 'FollowingsSeries',\n",
            "       'NumWords', 'NumMentions', 'NumHashtags', 'NumLinks', 'spammer'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Define your features (X) and target (y) columns - Adjust based on your dataset\n",
        "X = data[[\"AccountAge\", \"NumberOfFollowers\", \"NumberOfFollowings\", \"NumberOfTweets\",\n",
        "          \"FollowersToFollowingsRatio\", \"AvgTweetsperDay\", \"NumWords\", \"NumMentions\",\n",
        "          \"NumHashtags\", \"NumLinks\"]]\n",
        "\n",
        "y = data[\"spammer\"]  # Assuming 'spammer' is your target column\n",
        "\n",
        "# Step 1: Split the data into training and test sets (70% train, 30% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "mo5epYAFelAo"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for infinite values in X\n",
        "if np.any(np.isinf(X)):\n",
        "    print(\"Infinite values found in X\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q5RmDDptxWPy",
        "outputId": "f61811d4-55c3-46b6-bb51-1674b9aeae38"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Infinite values found in X\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace infinite values with NaN\n",
        "X.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "\n",
        "# Optionally fill NaN values with a specific value, like 0 or the mean of the column\n",
        "X.fillna(0, inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gzkHo9BOxY2u",
        "outputId": "5454d973-2cfc-4e50-9bee-6275c625b52b"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-26-16d289711e15>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  X.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
            "<ipython-input-26-16d289711e15>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  X.fillna(0, inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = X.apply(pd.to_numeric, errors='coerce')\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "vewsqVCCxf3Y",
        "outputId": "183667ab-b7a0-4126-eec6-dca7e4b19961"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AccountAge  NumberOfFollowers  NumberOfFollowings  NumberOfTweets  \\\n",
              "0            1217               3071                3269             861   \n",
              "1            1329                793                1949             226   \n",
              "2            1272               9644                1119           38674   \n",
              "3            1105               6029                2174           12718   \n",
              "4            1105               7029                7731             873   \n",
              "...           ...                ...                 ...             ...   \n",
              "39806           0                  3                 172               2   \n",
              "39807           0                  0                   5               5   \n",
              "39808           0                  1                  20               1   \n",
              "39809           0                  1                  20               1   \n",
              "39810           0                  0                   1               1   \n",
              "\n",
              "       FollowersToFollowingsRatio  AvgTweetsperDay   NumWords  NumMentions  \\\n",
              "0                        0.939431         0.707477  15.420000     0.335000   \n",
              "1                        0.406875         0.170053  13.343434     0.272727   \n",
              "2                        8.618409        30.404088  16.944162     0.553299   \n",
              "3                        2.773229        11.509502  13.450000     0.445000   \n",
              "4                        0.909197         0.790045  18.470000     0.105000   \n",
              "...                           ...              ...        ...          ...   \n",
              "39806                    0.017442         0.000000   7.000000     1.000000   \n",
              "39807                    0.000000         0.000000   8.200000     0.000000   \n",
              "39808                    0.050000         0.000000   2.000000     0.000000   \n",
              "39809                    0.050000         0.000000  18.000000     0.000000   \n",
              "39810                    0.000000         0.000000   7.000000     0.000000   \n",
              "\n",
              "       NumHashtags  NumLinks  \n",
              "0         0.090000  0.705000  \n",
              "1         0.510101  0.656566  \n",
              "2         0.664975  0.269036  \n",
              "3         0.095000  0.320000  \n",
              "4         0.010000  0.690000  \n",
              "...            ...       ...  \n",
              "39806     0.000000  0.000000  \n",
              "39807     0.800000  0.800000  \n",
              "39808     0.000000  0.000000  \n",
              "39809     0.000000  0.000000  \n",
              "39810     0.000000  0.000000  \n",
              "\n",
              "[39811 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09caabe9-2386-4f06-8d76-2a926a13e26e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AccountAge</th>\n",
              "      <th>NumberOfFollowers</th>\n",
              "      <th>NumberOfFollowings</th>\n",
              "      <th>NumberOfTweets</th>\n",
              "      <th>FollowersToFollowingsRatio</th>\n",
              "      <th>AvgTweetsperDay</th>\n",
              "      <th>NumWords</th>\n",
              "      <th>NumMentions</th>\n",
              "      <th>NumHashtags</th>\n",
              "      <th>NumLinks</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1217</td>\n",
              "      <td>3071</td>\n",
              "      <td>3269</td>\n",
              "      <td>861</td>\n",
              "      <td>0.939431</td>\n",
              "      <td>0.707477</td>\n",
              "      <td>15.420000</td>\n",
              "      <td>0.335000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>0.705000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1329</td>\n",
              "      <td>793</td>\n",
              "      <td>1949</td>\n",
              "      <td>226</td>\n",
              "      <td>0.406875</td>\n",
              "      <td>0.170053</td>\n",
              "      <td>13.343434</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>0.510101</td>\n",
              "      <td>0.656566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1272</td>\n",
              "      <td>9644</td>\n",
              "      <td>1119</td>\n",
              "      <td>38674</td>\n",
              "      <td>8.618409</td>\n",
              "      <td>30.404088</td>\n",
              "      <td>16.944162</td>\n",
              "      <td>0.553299</td>\n",
              "      <td>0.664975</td>\n",
              "      <td>0.269036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1105</td>\n",
              "      <td>6029</td>\n",
              "      <td>2174</td>\n",
              "      <td>12718</td>\n",
              "      <td>2.773229</td>\n",
              "      <td>11.509502</td>\n",
              "      <td>13.450000</td>\n",
              "      <td>0.445000</td>\n",
              "      <td>0.095000</td>\n",
              "      <td>0.320000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1105</td>\n",
              "      <td>7029</td>\n",
              "      <td>7731</td>\n",
              "      <td>873</td>\n",
              "      <td>0.909197</td>\n",
              "      <td>0.790045</td>\n",
              "      <td>18.470000</td>\n",
              "      <td>0.105000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.690000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39806</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>172</td>\n",
              "      <td>2</td>\n",
              "      <td>0.017442</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39807</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.200000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39808</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39809</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39810</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39811 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09caabe9-2386-4f06-8d76-2a926a13e26e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09caabe9-2386-4f06-8d76-2a926a13e26e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09caabe9-2386-4f06-8d76-2a926a13e26e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5a948d91-7a16-43d9-b54c-f153375fb3a7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a948d91-7a16-43d9-b54c-f153375fb3a7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5a948d91-7a16-43d9-b54c-f153375fb3a7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b57613db-31b4-467d-b7fd-b68ce619a263\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b57613db-31b4-467d-b7fd-b68ce619a263 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 39811,\n  \"fields\": [\n    {\n      \"column\": \"AccountAge\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 189,\n        \"min\": 0,\n        \"max\": 1329,\n        \"num_unique_values\": 1072,\n        \"samples\": [\n          910,\n          160,\n          676\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25938,\n        \"min\": 0,\n        \"max\": 4309347,\n        \"num_unique_values\": 5561,\n        \"samples\": [\n          5744,\n          109,\n          3291\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfFollowings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4282,\n        \"min\": 0,\n        \"max\": 109388,\n        \"num_unique_values\": 5428,\n        \"samples\": [\n          7704,\n          10905,\n          46501\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTweets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5458,\n        \"min\": 1,\n        \"max\": 350453,\n        \"num_unique_values\": 7404,\n        \"samples\": [\n          3233,\n          6100,\n          2220\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FollowersToFollowingsRatio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 212.50009263325302,\n        \"min\": 0.0,\n        \"max\": 33344.0,\n        \"num_unique_values\": 27682,\n        \"samples\": [\n          1.037863223,\n          0.933551472,\n          0.772925764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgTweetsperDay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.6325212277539,\n        \"min\": 0.0,\n        \"max\": 1366.733333,\n        \"num_unique_values\": 29328,\n        \"samples\": [\n          2.361111111,\n          96.09340659,\n          0.14893617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumWords\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58.63555964392307,\n        \"min\": 0.0,\n        \"max\": 9673.0,\n        \"num_unique_values\": 17968,\n        \"samples\": [\n          12.16455696,\n          14.405,\n          20.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumMentions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7555887452531845,\n        \"min\": 0.0,\n        \"max\": 88.6,\n        \"num_unique_values\": 6104,\n        \"samples\": [\n          1.125628141,\n          0.453488372,\n          0.578947368\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHashtags\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8167972740401166,\n        \"min\": 0.0,\n        \"max\": 547.5,\n        \"num_unique_values\": 3919,\n        \"samples\": [\n          0.058823529,\n          0.833333333,\n          0.247311828\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumLinks\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1828861271984463,\n        \"min\": 0.0,\n        \"max\": 388.5,\n        \"num_unique_values\": 5620,\n        \"samples\": [\n          0.010204082,\n          0.802030457,\n          0.30964467\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split data again\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "SLj1qd_5x1Kl"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Initialize the Random Forest model\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "\n",
        "# Step 3: Train the model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Step 4: Predict on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XHFXgaOAxnlK",
        "outputId": "de7706aa-98fd-40bc-ddb6-a3d2f6bfadc9"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, ..., 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
        "\n",
        "# Calculate accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy of the Random Forest model: {accuracy:.2f}\")\n",
        "\n",
        "# Calculate precision, recall, and F1-score\n",
        "precision = precision_score(y_test, y_pred, average='weighted')\n",
        "recall = recall_score(y_test, y_pred, average='weighted')\n",
        "f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "print(f\"Precision: {precision:.2f}\")\n",
        "print(f\"Recall: {recall:.2f}\")\n",
        "print(f\"F1-score: {f1:.2f}\")\n",
        "\n",
        "# Print classification report\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yVyusXNzyBv3",
        "outputId": "5c32bbdc-236f-4f7a-f3ac-4620e77093da"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the Random Forest model: 0.92\n",
            "Precision: 0.92\n",
            "Recall: 0.92\n",
            "F1-score: 0.92\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.92      0.92      3825\n",
            "           1       0.92      0.93      0.92      4138\n",
            "\n",
            "    accuracy                           0.92      7963\n",
            "   macro avg       0.92      0.92      0.92      7963\n",
            "weighted avg       0.92      0.92      0.92      7963\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "4_fVfK9dgcmZ"
      }
    }
  ]
}